I"ý<p>Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete, ready-to-publish static website suitable for serving with your favorite web server.</p>

<p>If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new Jekyll site by doing the following:</p>

<h2 id="how-to-install">How to install</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Install Jekyll and Bundler gems through RubyGems</span>
~ <span class="nv">$ </span>gem <span class="nb">install </span>jekyll bundler

<span class="c"># Create a new Jekyll site at ./myblog</span>
~ <span class="nv">$ </span>jekyll new myblog

<span class="c"># Change into your new directory</span>
~ <span class="nv">$ </span><span class="nb">cd </span>myblog

<span class="c"># Build the site on the preview server</span>
~/myblog <span class="nv">$ </span>bundle <span class="nb">exec </span>jekyll serve

<span class="c"># Now browse to http://localhost:4000</span>
</code></pre></div></div>

<h2 id="next-steps">Next steps</h2>

<p>Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome configuration options Jekyll makes available.</p>

<h2 id="basic-usage">Basic usage</h2>

<p>The Jekyll gem makes a <code class="language-plaintext highlighter-rouge">jekyll</code> executable available to you in your Terminal window. You can use this command in a number of ways:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>jekyll build
<span class="c"># =&gt; The current folder will be generated into ./_site</span>

<span class="nv">$ </span>jekyll build <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The current folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--source</span> &lt;<span class="nb">source</span><span class="o">&gt;</span> <span class="nt">--destination</span> &lt;destination&gt;
<span class="c"># =&gt; The &lt;source&gt; folder will be generated into &lt;destination&gt;</span>

<span class="nv">$ </span>jekyll build <span class="nt">--watch</span>
<span class="c"># =&gt; The current folder will be generated into ./_site,</span>
<span class="c">#    watched for changes, and regenerated automatically.</span>
</code></pre></div></div>

<h2 id="directory-structure">Directory structure</h2>

<p>Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data gets displayed in the layout, and more. This is all done through editing text files; the static web site is the final product.</p>

<p>A basic Jekyll site usually looks something like this:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">.</span>
â”œâ”€â”€ _config.yml
â”œâ”€â”€ _data
|   â””â”€â”€ members.yml
â”œâ”€â”€ _drafts
|   â”œâ”€â”€ begin-with-the-crazy-ideas.md
|   â””â”€â”€ on-simplicity-in-technology.md
â”œâ”€â”€ _includes
|   â”œâ”€â”€ footer.html
|   â””â”€â”€ header.html
â”œâ”€â”€ _layouts
|   â”œâ”€â”€ default.html
|   â””â”€â”€ post.html
â”œâ”€â”€ _posts
|   â”œâ”€â”€ 2007-10-29-page--nethack.md
|   â””â”€â”€ 2009-04-26-barcamp-boston-4-roundup.md
â”œâ”€â”€ _sass
|   â”œâ”€â”€ _base.scss
|   â””â”€â”€ _layout.scss
â”œâ”€â”€ _site
â”œâ”€â”€ .jekyll-metadata
â””â”€â”€ index.html <span class="c"># comment example</span>
</code></pre></div></div>

<h2 id="front-matter">Front matter</h2>

<p>The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form of valid YAML set between triple-dashed lines. Here is a basic example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: post
title: Blogging Like a Hacker
---
</code></pre></div></div>

<p>Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom ones of your own. These variables will then be available to you to access using Liquid tags both further down in the file and also in any layouts or includes that the page or post in question relies on.</p>

<p><img src="https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=entropy&amp;cs=tinysrgb&amp;w=1920&amp;h=1080&amp;fit=crop&amp;s=80308172730757a7db0434987fa985f3" alt="Example image" /></p>

<h2 id="where-additional-pages-live">Where additional pages live</h2>

<p>Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of creating pages:</p>

<ul>
  <li>Place named HTML or Markdown files for each page in your siteâ€™s root folder.</li>
  <li>Place pages inside folders and subfolders named whatever you want.</li>
</ul>

<p>Both methods work fine (and can be used in conjunction with each other), with the only real difference being the resulting URLs. By default, pages retain the same folder structure in <code class="language-plaintext highlighter-rouge">_site</code> as they do in the source directory.</p>
:ET